// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241201030324_NewMigrationForLatest")]
    partial class NewMigrationForLatest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Domain.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsInterviewSchedule")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddd3805e-6ea3-44f1-aa7b-411bc58b2e85"),
                            Email = "alice.johnson@techcorp.com",
                            IsInterviewSchedule = true,
                            Name = "Alice Johnson",
                            OrganizationName = "TechCorp",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            Id = new Guid("bddb92a0-4595-47ba-9006-a7c3547116e7"),
                            Email = "bob.smith@innovatex.com",
                            IsInterviewSchedule = false,
                            Name = "Bob Smith",
                            OrganizationName = "InnovateX",
                            Phone = "234-567-8901"
                        });
                });

            modelBuilder.Entity("API.Models.Domain.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InterviewDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRemote")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("POCPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrimaryContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("RateHourlyOrSalary")
                        .HasColumnType("float");

                    b.Property<int?>("Round")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId")
                        .IsUnique()
                        .HasFilter("[ContactId] IS NOT NULL");

                    b.HasIndex("PrimaryContactId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9642178a-5a57-49a1-af4f-87d7a005b5dd"),
                            ContactId = new Guid("ddd3805e-6ea3-44f1-aa7b-411bc58b2e85"),
                            InterviewDateAndTime = new DateTime(2024, 12, 2, 20, 3, 23, 286, DateTimeKind.Local).AddTicks(6546),
                            IsRemote = true,
                            OrganizationName = "TechCorp",
                            POCPhone = "123-456-7890",
                            PaymentType = "Salary",
                            Position = "Software Engineer",
                            RateHourlyOrSalary = 120000.0,
                            Round = 1
                        },
                        new
                        {
                            Id = new Guid("7cd8b6c7-d892-45fa-8e7e-e8c7fa51c7c1"),
                            InterviewDateAndTime = new DateTime(2024, 12, 3, 20, 3, 23, 289, DateTimeKind.Local).AddTicks(5194),
                            IsRemote = false,
                            OrganizationName = "InnovateX",
                            POCPhone = "234-567-8901",
                            PaymentType = "Hourly",
                            Position = "Frontend Developer",
                            PrimaryContactId = new Guid("bddb92a0-4595-47ba-9006-a7c3547116e7"),
                            RateHourlyOrSalary = 50.0,
                            Round = 1
                        });
                });

            modelBuilder.Entity("API.Models.Domain.Meeting", b =>
                {
                    b.HasOne("API.Models.Domain.Contact", "Contact")
                        .WithOne("Meeting")
                        .HasForeignKey("API.Models.Domain.Meeting", "ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Models.Domain.Contact", "PrimaryContact")
                        .WithMany("Meetings")
                        .HasForeignKey("PrimaryContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contact");

                    b.Navigation("PrimaryContact");
                });

            modelBuilder.Entity("API.Models.Domain.Contact", b =>
                {
                    b.Navigation("Meeting");

                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
